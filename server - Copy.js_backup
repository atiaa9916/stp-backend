// server.js
const express  = require('express');
const mongoose = require('mongoose');
const dotenv   = require('dotenv');
const cors     = require('cors');
const path     = require('path');
const fs       = require('fs');
const helmet   = require('helmet');
const rateLimit = require('express-rate-limit');

dotenv.config();

// โ ุชุญููู ูู ูุฌูุฏ ุฑุงุจุท ุงูุงุชุตุงู
if (!process.env.MONGO_URI) {
  console.error('โ ุฎุทุฃ: ูู ูุชู ุงูุนุซูุฑ ุนูู MONGO_URI ูู ููู ุงูุจูุฆุฉ .env');
  process.exit(1);
}

const app  = express();
const PORT = process.env.PORT || 5000;

// ูู ููุช ุฎูู Proxy (Nginx/Heroku), ูุฐุง ูุญุณูู ุณููู rate-limit
app.set('trust proxy', 1);

// ========== Middleware ุนุงู ==========
app.use(express.json()); // ุชุณุชุทูุน ุฒูุงุฏุฉ limit ุนูุฏ ุงููุฒูู: express.json({ limit: '2mb' })

// ุฃูุงู ุงูููุฏุฑ
app.use(helmet({
  crossOriginResourcePolicy: false,
  contentSecurityPolicy: false
}));

// ูุนุฏู ุงูุทูุจุงุช โ ุทุจููู ุนูู /api ููุท
const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 300,
  standardHeaders: true,
  legacyHeaders: false
});
app.use('/api', apiLimiter);

// CORS ูู .env (CORS_ALLOWED_ORIGINS=http://localhost:5173,http://localhost:3000)
const allowedOrigins = (process.env.CORS_ALLOWED_ORIGINS || '')
  .split(',')
  .map(s => s.trim())
  .filter(Boolean);

app.use(cors({
  origin: allowedOrigins.length ? allowedOrigins : true,
  credentials: true
}));

// ุชุนุทูู ETag ูููุน ุงููุงุด ูุทูุจุงุช ุงูู API
app.set('etag', false);
app.use('/api', (req, res, next) => {
  res.set('Cache-Control', 'no-store');
  next();
});

// ========== ูููุงุช ุซุงุจุชุฉ ==========
const uploadsDir = path.join(__dirname, 'uploads', 'shamcash');
fs.mkdirSync(uploadsDir, { recursive: true });
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// ========== ุงุณุชูุฑุงุฏ ุงููุณุงุฑุงุช ==========
const authRoutes             = require('./routes/authRoutes');
const tripRoutes             = require('./routes/tripRoutes');
const walletRoutes           = require('./routes/walletRoutes');
const transactionRoutes      = require('./routes/transactionRoutes');
const rechargeRoutes         = require('./routes/rechargeRoutes');
const userRoutes             = require('./routes/userRoutes');
const commissionRoutes       = require('./routes/commissionRoutes');

const adminAuthRoutes        = require('./routes/adminAuthRoutes');
const adminDashboardRoutes   = require('./routes/adminDashboardRoutes');
const adminTransactionRoutes = require('./routes/adminTransactionRoutes');
const adminCommissionRoutes  = require('./routes/adminCommissionRoutes');
const adminUserRoutes        = require('./routes/adminUserRoutes');
const adminRechargeRoutes    = require('./routes/adminRechargeRoutes');
const adminJobRoutes         = require('./routes/adminJobRoutes');

const driverRoutes           = require('./routes/driverRoutes');
const passengerRoutes        = require('./routes/passengerRoutes');
const vendorRoutes           = require('./routes/vendorRoutes');

const paymentsRoutes         = require('./routes/paymentsRoutes');
const geocodeRoutes          = require('./routes/geocodeRoutes');
const rentalRoutes           = require('./routes/rentalRoutes');

const processScheduledTrips  = require('./utils/scheduledTripProcessor');

// ========== ุฑุจุท ุงููุณุงุฑุงุช ==========
app.use('/api/auth',           authRoutes);
app.use('/api/trips',          tripRoutes);

app.use('/api/wallet',         walletRoutes);
// (ุงุฎุชูุงุฑู ููุชูุงูููุฉ ูุน ุงุณุชุฏุนุงุกุงุช ูุฏููุฉ ูุซู /api/wallets/me)
app.use('/api/wallets',        walletRoutes);

app.use('/api/transactions',   transactionRoutes);
app.use('/api/recharge',       rechargeRoutes);           // ุงููุณุงุฑ ุงูุฑุณูู ููู ูุง ูุฎุต ุฑููุฒ ุงูุดุญู
// โ ุชูุงููู ููุท ูุฏุนู ูุณุงุฑุงุช ูุฏููุฉ ูุซู: /api/vendor/recharge/transactions
app.use('/api/vendor/recharge', rechargeRoutes);

app.use('/api/users',          userRoutes);
app.use('/api/commission',     commissionRoutes);

app.use('/api/admin',                  adminAuthRoutes);
app.use('/api/admin',                  adminDashboardRoutes);
app.use('/api/admin/transactions',     adminTransactionRoutes);
app.use('/api/admin/commission',       adminCommissionRoutes);
app.use('/api/admin/users',            adminUserRoutes);
app.use('/api/admin/recharge',         adminRechargeRoutes);
app.use('/api/admin/jobs',             adminJobRoutes);

app.use('/api/driver',         driverRoutes);
app.use('/api/passenger',      passengerRoutes);
app.use('/api/vendor',         vendorRoutes);

app.use('/api/payments',       paymentsRoutes);
app.use('/api/geocode',        geocodeRoutes);
app.use('/api/rentals',        rentalRoutes);

// ุตูุญุฉ ุงุฎุชุจุงุฑ ูุตุญูุฉ
app.get('/', (req, res) => res.send('๐ ููุตุฉ ุงูููู ุงูุณูุฑูุฉ ุชุนูู ุจูุฌุงุญ!'));
app.get('/api/health', (req, res) =>
  res.json({ ok: true, mongo: mongoose.connection.readyState }) // 1 = connected
);

// ========== ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุซู ุชุดุบูู ุงูุฎุงุฏู ==========
mongoose.connect(process.env.MONGO_URI)
  .then(() => {
    console.log('โ ุชู ุงูุงุชุตุงู ุจู MongoDB');

    const cn = mongoose.connection;
    const rawUrl =
      (cn.client && cn.client.s && cn.client.s.url) || process.env.MONGO_URI || '';
    const safeUrl = rawUrl.replace(/\/\/([^:@]*):([^@]*)@/, '//$1:***@'); // ุฅุฎูุงุก ูููุฉ ูุฑูุฑ ุฅู ููุฌุฏุช
    console.log('Mongo DB =', cn.name, safeUrl);

    const server = app.listen(PORT, () => {
      console.log(`๐ ุงูุฎุงุฏู ูุนูู ุนูู http://localhost:${PORT}`);

      // โฑ๏ธ ุดุบูู ูุนุงูุฌุฉ ุงูุฑุญูุงุช ุงููุฌุฏููุฉ (ูููู ุชุนุทูููุง ุจูุถุน RUN_JOBS=false)
      if ((process.env.RUN_JOBS || 'true').toLowerCase() === 'true') {
        setInterval(processScheduledTrips, 60 * 1000);
      }
    });

    // ุฅุบูุงู ุฃููู
    const shutdown = async (signal = 'SIGTERM') => {
      try {
        console.log(`๐ ${signal} received. Shutting down...`);

        // 1) ุฃููู ุงุณุชูุจุงู ุงุชุตุงูุงุช HTTP ุฌุฏูุฏุฉ
        if (server && server.close) {
          await new Promise((resolve) => server.close(resolve));
        }

        // 2) ุฃุบูู ุงุชุตุงู ูููุบู
        await mongoose.connection.close();
        // ุฃู: await mongoose.disconnect();

        console.log('๐ Closed MongoDB connection. Bye!');
        process.exit(0);
      } catch (err) {
        console.error('โ Shutdown error:', err);
        process.exit(1);
      }
    };

    // ุฅุดุงุฑุงุช ุงูุฅููุงุก โ once ุจุฏู ุชูุฑุงุฑ ุงูุชุณุฌูู ูุฑุชูู
    process.once('SIGINT',  () => shutdown('SIGINT'));
    process.once('SIGTERM', () => shutdown('SIGTERM'));

  })
  .catch((err) => {
    console.error('โ ูุดู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช:', err.message);
    process.exit(1);
  });
